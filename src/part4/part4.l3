#lang racket/base

@QUESTION 1:

; Signature: append(l1, l2)
; Type: [List(T1)*List(T2)=>List(T3)]
; Purpose: Combines two lists
; Pre-conditions: true
; Tests: (append '(1 2) '(3 4)) -> '(1 2 3 4)
(define append
  (lambda (l1 l2)
    (if (eq? l1 '())
        l2
        (cons (car l1) (append (cdr l1) l2)))))

(append '(1 2) '(1 4))

@QUESTION 2:

; Signature: reverse(lst)
; Type: [List(T1)=>List(T1)]
; Purpose: Reverses element order in a given list
; Pre-conditions: true
; Tests: (reverse '(1 2 3)) -> '(3 2 1)
(define reverse
    (lambda (l)
    (if(eq? l '())
      l
      (append (reverse (cdr l)) (cons (car l) '())))))

@QUESTION 3:

; Signature: duplicate-items(lst, dup-count)
; Type:[List(T1)*List(Numbers)=>List(T1)]
; Purpose: Duplicate each item in the first list according to the numbers defined in the same postion in the second list, treating the second list cyclically if it's shorter than the first.
; Pre-conditions: (not (?eq dup-count '()))
; Tests: (duplicate-items '(1 2 3) '(1 0)) -> '(1 3); (duplicate-items '(1 2 3) '(2 1 0 10 2)) -> '(1 1 2)
(define duplicate-items
    (lambda (lst dup-count)
      (makeDupList lst dup-count 0)  
))

(define length
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ 1 (length (cdr lst))))))

(define nth
  (lambda (lst n)
    (if (eq? lst '())
        '()
        (if (= n 0)
            (car lst)
            (nth (cdr lst) (- n 1))))))

(define modulo
  (lambda (a b)
    (if (< a b)
      a
    (modulo (- a b) b))))


(define duplicate 
  (lambda (x i)
    (if (eq? 0 i)
        '()
        (cons x (duplicate x (- i 1))))))

(define makeDupList 
  (lambda (l1 l2 i)
   (if (eq? l1 '())
      l1
    (append (duplicate (car l1) (nth l2 i)) (makeDupList (cdr l1) l2 (modulo (+ i 1) (length l2)))))))

